--------------------------------------------------------------
WHAT IS ACCESS CONTROL?
--------------------------------------------------------------

Access control is the application of constraints on who or what is authorized to perform actions or access resources. In the context of web applications, access control is dependent on authentication and session management:

    Authentication confirms that the user is who they say they are.
    Session management identifies which subsequent HTTP requests are being made by that same user.
    Access control determines whether the user is allowed to carry out the action that they are attempting to perform.

Broken access controls are common and often present a critical security vulnerability. Design and management of access controls is a complex and dynamic problem that applies business, organizational, and legal constraints to a technical implementation. Access control design decisions have to be made by humans so the potential for errors is high. 

--------------------------------------------------------------
ACCESS CONTROL SECURITY MODELS:-
--------------------------------------------------------------

WHAT ARE ACCESS CONTROL SECURITY MODELS?
An access control security model is a formally defined definition of a set of access control rules that is independent of technology or implementation platform. Access control security models are implemented within operating systems, networks, database management systems and back office, application and web server software. Various access control security models have been devised over the years to match access control policies to business or organizational rules and changes in technology.

PROGRAMMATIC ACCESS CONTROL:-
With programmatic access control, a matrix of user privileges is stored in a database or similar and access controls are applied 
programmatically with reference to this matrix. This approach to access control can include roles or groups or individual users, 
collections or workflows of processes and can be highly granular.

DISCRETIONARY ACCESS CONTROL (DAC):-
With discretionary access control, access to resources or functions is constrained based upon users or named groups of users. Owners of resources or functions have the ability to assign or delegate access permissions to users. This model is highly granular with access rights defined to an individual resource or function and user. Consequently the model can become very complex to design and manage.

MANDATORY ACCESS CONTROL (MAC):-
Mandatory access control is a centrally controlled system of access control in which access to some object (a file or other resource) by a subject is constrained. Significantly, unlike DAC the users and owners of resources have no capability to delegate or modify access rights for their resources. This model is often associated with military clearance-based systems.

ROLE-BASED ACCESS CONTROL (RBAC):-
With role-based access control, named roles are defined to which access privileges are assigned. Users are then assigned to single or multiple roles. RBAC provides enhanced management over other access control models and if properly designed sufficient granularity to provide manageable access control in complex applications. For example, the purchase clerk might be defined as a role with access permissions for a subset of purchase ledger functionality and resources. As employees leave or join an organization then access control management is simplified to defining or revoking membership of the purchases clerk role.

RBAC is most effective when there are sufficient roles to properly invoke access controls but not so many as to make the model excessively complex and unwieldy to manage.
 
--------------------------------------------------------------
TYPES OF ACCESS CONTROL:-
--------------------------------------------------------------

VERTICAL ACCESS CONTROLS:-
Vertical access controls are mechanisms that restrict access to sensitive functionality to specific types of users.
With vertical access controls, different types of users have access to different application functions. For example, an administrator might be able to modify or delete any user's account, while an ordinary user has no access to these actions. Vertical access controls can be more fine-grained implementations of security models designed to enforce business policies such as separation of duties and least privilege.

HORIZONTAL ACCESS CONTROLS:-
Horizontal access controls are mechanisms that restrict access to resources to specific users.
With horizontal access controls, different users have access to a subset of resources of the same type. For example, a banking application will allow a user to view transactions and make payments from their own accounts, but not the accounts of any other user.

CONTEXT-DEPENDENT ACCESS CONTROLS:-
Context-dependent access controls restrict access to functionality and resources based upon the state of the application or the user's interaction with it.
Context-dependent access controls prevent a user performing actions in the wrong order. For example, a retail website might prevent users from modifying the contents of their shopping cart after they have made payment. 
--------------------------------------------------------------
EXAMPLES OF BROKEN ACCESS CONTROLS:-
--------------------------------------------------------------

Broken access control vulnerabilities exist when a user can access resources or perform actions that they are not supposed to be able to.

Vertical privilege escalation:-

If a user can gain access to functionality that they are not permitted to access then this is vertical privilege escalation. For example, if a non-administrative user can gain access to an admin page where they can delete user accounts, then this is vertical privilege escalation.

Unprotected functionality:-

At its most basic, vertical privilege escalation arises where an application does not enforce any protection for sensitive functionality. For example, administrative functions might be linked from an administrator's welcome page but not from a user's welcome page. However, a user might be able to access the administrative functions by browsing to the relevant admin URL.

For example, a website might host sensitive functionality at the following URL:
https://insecure-website.com/admin

This might be accessible by any user, not only administrative users who have a link to the functionality in their user interface. In some cases, the administrative URL might be disclosed in other locations, such as the robots.txt file:
https://insecure-website.com/robots.txt

Even if the URL isn't disclosed anywhere, an attacker may be able to use a wordlist to brute-force the location of the sensitive functionality. 

LAB-SOLUTIONl:-
    Go to the lab and view robots.txt by appending /robots.txt to the lab URL. Notice that the Disallow line discloses the path to the admin panel.
    In the URL bar, replace /robots.txt with /administrator-panel to load the admin panel.
    Delete carlos.

--------------------------------------------------------------
 In some cases, sensitive functionality is concealed by giving it a less predictable URL. This is an example of so-called "security by obscurity". However, hiding sensitive functionality does not provide effective access control because users might discover the obfuscated URL in a number of ways.

Imagine an application that hosts administrative functions at the following URL:
https://insecure-website.com/administrator-panel-yb556

This might not be directly guessable by an attacker. However, the application might still leak the URL to users. The URL might be disclosed in JavaScript that constructs the user interface based on the user's role:
<script>
	var isAdmin = false;
	if (isAdmin) {
		...
		var adminPanelTag = document.createElement('a');
		adminPanelTag.setAttribute('href', 'https://insecure-website.com/administrator-panel-yb556');
		adminPanelTag.innerText = 'Admin panel';
		...
	}
</script>

This script adds a link to the user's UI if they are an admin user. However, the script containing the URL is visible to all users regardless of their role. 

--------------------------------------------------------------
PARAMETER-BASED ACCESS CONTROL METHODS:-
--------------------------------------------------------------

Some applications determine the user's access rights or role at login, and then store this information in a user-controllable location. This could be:

    A hidden field.
    A cookie.
    A preset query string parameter.

The application makes access control decisions based on the submitted value. For example:
https://insecure-website.com/login/home.jsp?admin=true
https://insecure-website.com/login/home.jsp?role=1

This approach is insecure because a user can modify the value and access functionality they're not authorized to, such as administrative functions. 

lab solution:-

    Log in using the supplied credentials and access your account page.
    Use the provided feature to update the email address associated with your account.
    Observe that the response contains your role ID.
    Send the email submission request to Burp Repeater, add "roleid":2 into the JSON in the request body, and resend it.
    Observe that the response shows your roleid has changed to 2.
    Browse to /admin and delete carlos.

-------------------------------------------------------------------
BROKEN ACCESS CONTROL RESULTING FROM PLATFORM MISCONFIGURATION:-
-------------------------------------------------------------------

Some applications enforce access controls at the platform layer. they do this by restricting access to specific URLs and HTTP methods based on the user's role. For example, an application might configure a rule as follows:
DENY: POST, /admin/deleteUser, managers

This rule denies access to the POST method on the URL /admin/deleteUser, for users in the managers group. Various things can go wrong in this situation, leading to access control bypasses.

Some application frameworks support various non-standard HTTP headers that can be used to override the URL in the original request, such as X-Original-URL and X-Rewrite-URL. If a website uses rigorous front-end controls to restrict access based on the URL, but the application allows the URL to be overridden via a request header, then it might be possible to bypass the access controls using a request like the following:
POST / HTTP/1.1
X-Original-URL: /admin/deleteUser
...

LAB SOLUTION:-
    Try to load /admin and observe that you get blocked. Notice that the response is very plain, suggesting it may originate from a front-end system.
    Send the request to Burp Repeater. Change the URL in the request line to / and add the HTTP header X-Original-URL: /invalid. Observe that the application returns a "not found" response. This indicates that the back-end system is processing the URL from the X-Original-URL header.
    Change the value of the X-Original-URL header to /admin. Observe that you can now access the admin page.
    To delete carlos, add ?username=carlos to the real query string, and change the X-Original-URL path to /admin/delete.
--------------------------------------------------------------
An alternative attack relates to the HTTP method used in the request. The front-end controls described in the previous sections restrict access based on the URL and HTTP method. Some websites tolerate different HTTP request methods when performing an action. If an attacker can use the GET (or another) method to perform actions on a restricted URL, they can bypass the access control that is implemented at the platform layer. 

LAB SOLUTION:-

    Log in using the admin credentials.
    Browse to the admin panel, promote carlos, and send the HTTP request to Burp Repeater
    than change your name place on carlos, response  show is error:unauthorised 
    than you need to try change session id to your 
    log in your credential with that web 
    than capture your login request with burp
    copy your session and paste before request
    than send request, response also show error:unauthorised
    than you need to also chang request method
    here chand into get method and show response is successfull promoted you as admin.
    
-------------------------------------------------------------------
BROKEN ACCESS CONTROL RESULTING FROM URL-MATCHING DISCREPANCIES:-
-------------------------------------------------------------------

Websites can vary in how strictly they match the path of an incoming request to a defined endpoint. For example, they may tolerate inconsistent capitalization, so a request to /ADMIN/DELETEUSER may still be mapped to the /admin/deleteUser endpoint. If the access control mechanism is less tolerant, it may treat these as two different endpoints and fail to enforce the correct restrictions as a result.

Similar discrepancies can arise if developers using the Spring framework have enabled the useSuffixPatternMatch option. This allows paths with an arbitrary file extension to be mapped to an equivalent endpoint with no file extension. In other words, a request to /admin/deleteUser.anything would still match the /admin/deleteUser pattern. Prior to Spring 5.3, this option is enabled by default.

On other systems, you may encounter discrepancies in whether /admin/deleteUser and /admin/deleteUser/ are treated as distinct endpoints. In this case, you may be able to bypass access controls by appending a trailing slash to the path.
Horizontal privilege escalation

Horizontal privilege escalation occurs if a user is able to gain access to resources belonging to another user, instead of their own resources of that type. For example, if an employee can access the records of other employees as well as their own, then this is horizontal privilege escalation.

Horizontal privilege escalation attacks may use similar types of exploit methods to vertical privilege escalation. For example, a user might access their own account page using the following URL:
https://insecure-website.com/myaccount?id=123

If an attacker modifies the id parameter value to that of another user, they might gain access to another user's account page, and the associated data and functions.

Note:-
This is an example of an insecure direct object reference (IDOR) vulnerability. This type of vulnerability arises where user-controller parameter values are used to access resources or functions directly.

In some applications, the exploitable parameter does not have a predictable value. For example, instead of an incrementing number, an application might use globally unique identifiers (GUIDs) to identify users. This may prevent an attacker from guessing or predicting another user's identifier. However, the GUIDs belonging to other users might be disclosed elsewhere in the application where users are referenced, such as user messages or reviews. 

LAB:-
 This lab has a horizontal privilege escalation vulnerability on the user account page, but identifies users with GUIDs.

To solve the lab, find the GUID for carlos, then submit his API key as the solution.

You can log in to your own account using the following credentials: wiener:peter 

SOLUTION:-
    Find a blog post by carlos.
    Click on carlos and observe that the URL contains his user ID. Make a note of this ID.
    Log in using the supplied credentials and access your account page.
    Change the "id" parameter to the saved user ID.
    Retrieve and submit the API key.

In some cases, an application does detect when the user is not permitted to access the resource, and returns a redirect to the login page. However, the response containing the redirect might still include some sensitive data belonging to the targeted user, so the attack is still successful. 

LAB:-
 This lab contains an access control vulnerability where sensitive information is leaked in the body of a redirect response.
To solve the lab, obtain the API key for the user carlos and submit it as the solution.
You can log in to your own account using the following credentials: wiener:peter

SOLUTION:-
    Log in using the supplied credentials and access your account page.
    Send the request to Burp Repeater.
    Change the "id" parameter to carlos.
    Observe that although the response is now redirecting you to the home page, it has a body containing the API key belonging to carlos.
    Submit the API key.


--------------------------------------------------------------
HORIZONTAL TO VERTICAL PRIVILEGE ESCALATION:-
--------------------------------------------------------------

Often, a horizontal privilege escalation attack can be turned into a vertical privilege escalation, by compromising a more privileged user. For example, a horizontal escalation might allow an attacker to reset or capture the password belonging to another user. If the attacker targets an administrative user and compromises their account, then they can gain administrative access and so perform vertical privilege escalation.

An attacker might be able to gain access to another user's account page using the parameter tampering technique already described for horizontal privilege escalation:
https://insecure-website.com/myaccount?id=456

If the target user is an application administrator, then the attacker will gain access to an administrative account page. This page might disclose the administrator's password or provide a means of changing it, or might provide direct access to privileged functionality. 

--------------------------------------------------------------
INSECURE DIRECT OBJECT REFERENCES (IDOR):-
--------------------------------------------------------------

In this section, we will explain what insecure direct object references (IDOR) are and describe some common vulnerabilities.

WHAT ARE INSECURE DIRECT OBJECT REFERENCES (IDOR)?
Insecure direct object references (IDOR) are a type of access control vulnerability that arises when an application uses user-supplied input to access objects directly. The term IDOR was popularized by its appearance in the OWASP 2007 Top Ten. However, it is just one example of many access control implementation mistakes that can lead to access controls being circumvented. IDOR vulnerabilities are most commonly associated with horizontal privilege escalation, but they can also arise in relation to vertical privilege escalation.

IDOR EXAMPLES:-
There are many examples of access control vulnerabilities where user-controlled parameter values are used to access resources or functions directly.

IDOR VULNERABILITY WITH DIRECT REFERENCE TO DATABASE OBJECTS:-
Consider a website that uses the following URL to access the customer account page, by retrieving information from the back-end database:
https://insecure-website.com/customer_account?customer_number=132355

Here, the customer number is used directly as a record index in queries that are performed on the back-end database. If no other controls are in place, an attacker can simply modify the customer_number value, bypassing access controls to view the records of other customers. This is an example of an IDOR vulnerability leading to horizontal privilege escalation.

An attacker might be able to perform horizontal and vertical privilege escalation by altering the user to one with additional privileges while bypassing access controls. Other possibilities include exploiting password leakage or modifying parameters once the attacker has landed in the user's accounts page, for example.

IDOR VULNERABILITY WITH DIRECT REFERENCE TO STATIC FILES:-
IDOR vulnerabilities often arise when sensitive resources are located in static files on the server-side filesystem. For example, a website might save chat message transcripts to disk using an incrementing filename, and allow users to retrieve these by visiting a URL like the following:
https://insecure-website.com/static/12144.txt

In this situation, an attacker can simply modify the filename to retrieve a transcript created by another user and potentially obtain user credentials and other sensitive data. 
LAB

SOLUTION:-
    Select the Live chat tab.
    Send a message and then select View transcript.
    Review the URL and observe that the transcripts are text files assigned a filename containing an incrementing number.
    like :-2.txt,3.txt,.... but don't start with 1.txt
    so, Change the filename to 1.txt and review the text. Notice a password within the chat transcript.
    Return to the main lab page and log in using the stolen credentials.

--------------------------------------------------------------
ACCESS CONTROL VULNERABILITIES IN MULTI-STEP PROCESSES:-
--------------------------------------------------------------

Many websites implement important functions over a series of steps. This is common when:

    A variety of inputs or options need to be captured.
    The user needs to review and confirm details before the action is performed.

For example, the administrative function to update user details might involve the following steps:

    Load the form that contains details for a specific user.
    Submit the changes.
    Review the changes and confirm.

Sometimes, a website will implement rigorous access controls over some of these steps, but ignore others. Imagine a website where access controls are correctly applied to the first and second steps, but not to the third step. The website assumes that a user will only reach step 3 if they have already completed the first steps, which are properly controlled. An attacker can gain unauthorized access to the function by skipping the first two steps and directly submitting the request for the third step with the required parameters. 

--------------------------------------------------------------
REFERER-BASED ACCESS CONTROL:-
--------------------------------------------------------------

Some websites base access controls on the Referer header submitted in the HTTP request. The Referer header can be added to requests by browsers to indicate which page initiated a request.

For example, an application robustly enforces access control over the main administrative page at /admin, but for sub-pages such as /admin/deleteUser only inspects the Referer header. If the Referer header contains the main /admin URL, then the request is allowed.

In this case, the Referer header can be fully controlled by an attacker. This means that they can forge direct requests to sensitive sub-pages by supplying the required Referer header, and gain unauthorized access.

LAB SOLUTION:-
    Log in using the admin credentials.
    Browse to the admin panel, promote carlos, and send the HTTP request to Burp Repeater.
    Open a private/incognito browser window, and log in with the non-admin credentials.
    Browse to /admin-roles?username=carlos&action=upgrade and observe that the request is treated as unauthorized due to the absent Referer header.
    Copy the non-admin user's session cookie into the existing Burp Repeater request, change the username to yours, and replay it.
 
--------------------------------------------------------------
LOCATION-BASED ACCESS CONTROL:-
--------------------------------------------------------------

Some websites enforce access controls based on the user's geographical location. This can apply, for example, to banking applications or media services where state legislation or business restrictions apply. These access controls can often be circumvented by the use of web proxies, VPNs, or manipulation of client-side geolocation mechanisms. 
--------------------------------------------------------------
HOW TO PREVENT ACCESS CONTROL VULNERABILITIES:-
--------------------------------------------------------------

Access control vulnerabilities can be prevented by taking a defense-in-depth approach and applying the following principles:

    Never rely on obfuscation alone for access control.
    Unless a resource is intended to be publicly accessible, deny access by default.
    Wherever possible, use a single application-wide mechanism for enforcing access controls.
    At the code level, make it mandatory for developers to declare the access that is allowed for each resource, and deny access by default.
    Thoroughly audit and test access controls to ensure they work as designed.
